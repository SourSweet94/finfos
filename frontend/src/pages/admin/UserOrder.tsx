import { useContext, useEffect, useState } from "react";
import { Col, Container, Row } from "react-bootstrap";
import { AuthContext } from "../../context/AuthContext";
import { AppContext } from "../../context/AppContext";
import Table from "../../components/Table";
import Pagination from "../../components/Pagination";
import Text from "../../components/Text";

interface OrderType {
  _id: string;
  buyer_id: string;
  buyer_email: string;
  items: {
    _id: string; // mongodb autogenerated, unused
    food_id: string;
    food_title: string;
    food_price: number;
  }[];
  amount: number;
}

const UserOrder = () => {
  const {
    state: { user },
  } = useContext(AuthContext);

  const { setLoading } = useContext(AppContext);

  const [order, setOrder] = useState<OrderType[]>([]);

  const [currentPage, setCurrentPage] = useState(1);
  const itemsPerPage = 5;
  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const currentItems = order.slice(indexOfFirstItem, indexOfLastItem);
  const paginate = (pageNumber: number) => setCurrentPage(pageNumber);

  // const handleDelete = async ({ _id, price }: ) => {
  //   if (!user) {
  //     return;
  //   }
  //   await fetch(`http://localhost:4000/api/order`, {
  //     method: "DELETE",
  //     headers: {
  //       Authorization: `Bearer ${user.token}`,
  //     },
  //     body: JSON.stringify({ _id }),
  //   });
  //   setOrder((prev) => prev.filter((order:any) => order._id !== _id));
  // };

  useEffect(() => {
    const fetchOrder = async () => {
      setLoading(true);
      const response = await fetch("http://localhost:4000/api/order", {
        headers: {
          Authorization: `Bearer ${user.token}`,
        },
      });

      const json: OrderType[] = await response.json();

      setOrder(json);

      setLoading(false);
    };
    if (user) {
      fetchOrder();
    }
  }, []);

  const headers = ["Email", "Item", "Amount"];

  const tableData = currentItems.map((order) => ({
    email: order.buyer_email,
    item: order.items.map((item) => (
      <Row key={item._id}>
        <Col>{item.food_title}</Col>
        <Col>RM {item.food_price}</Col>
      </Row>
    )),
    amount: <Text>RM {order.amount}</Text>,
  }));

  return (
    <>
      {order.length > 0 ? (
        <>
          <Table
            headers={headers}
            data={tableData}
            currentPage={currentPage}
            itemsPerPage={itemsPerPage}
          />
          <Container className="d-flex justify-content-center mt-3">
            <Pagination
              itemsPerPage={itemsPerPage}
              totalItems={order.length}
              currentPage={currentPage}
              paginate={paginate}
            />
          </Container>
        </>
      ) : (
        <Text>No orders</Text>
      )}
    </>
  );
};

export default UserOrder;
